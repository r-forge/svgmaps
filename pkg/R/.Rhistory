data <- as_svgmaps(data, ...)
ggplot(data, mapping = aes_string(x = "long", y = "lat", group = "element_id")) + coord_map()
}
svgmap(home)
source('~/Dropbox/svgmaps/pkg/R/geom-ipoint.R')
svgmap(home, vars_node = "shop") + igeom_point(aes(colour = variable))
svgmap <- function (data = NULL, ...) {
data <- as_svgmaps(data, ...)
ggplot(data, mapping = aes_string(x = "lon", y = "lat", group = "element_id")) + coord_map()
}
svgmap(home, vars_node = "shop") + igeom_point(aes(colour = variable))
source('~/Dropbox/svgmaps/pkg/R/geom-ipoint.R')
svgmap(home, vars_node = "shop") + igeom_point(aes(colour = variable))
source('~/Dropbox/svgmaps/pkg/R/geom-ipoint.R')
svgmap(home, vars_node = "shop") + igeom_point(aes(colour = variable))
test <- as_svgmaps(home, vars_node = "shop")
test
summary(test)
ggplot(test, aes(x = lon, y = lat, group = element_id)) + igeom_poin()
ggplot(test, aes(x = lon, y = lat, group = element_id)) + igeom_point()
ggplot(test, aes(x = lon, y = lat, group = element_id)) + igeom_point(aes(colour = shop))
ggplot(test, aes(x = lon, y = lat, group = element_id)) + igeom_point(aes(colour = variable))
ggplot(test, aes(x = lon, y = lat, group = element_id)) + igeom_point(aes(colour = variable), test)
ggplot(test, aes(x = lon, y = lat, group = element_id)) + geom_point(aes(colour = variable), test)
ggplot(test, aes(x = lon, y = lat, group = element_id)) + geom_point(aes(colour = variable))
source('~/Dropbox/svgmaps/pkg/R/geom-ipoint.R')
ggplot(test, aes(x = lon, y = lat, group = element_id)) + geom_point(aes(colour = variable))
ggplot(test, aes(x = lon, y = lat, group = element_id)) + igeom_point(aes(colour = variable), test)
ls()
data
source('~/Dropbox/svgmaps/pkg/R/svgmap.R')
Q
source('~/Dropbox/svgmaps/pkg/R/svgmap.R')
ggplot(test, aes(x = lon, y = lat, group = element_id)) + igeom_point(aes(colour = variable), test)
ls()
data
Q
svgmap(home, vars_node = "shop") + igeom_point(aes(colour = variable))
data
save_svgmaps <- function (name, object) {
## Open a new SVG-Device
svgdev <- gridSVG:::openSVGDev(name, width=par("din")[1], height=par("din")[2])
## Translate grid object, write
gridSVG:::gridToDev(object, svgdev)
## Close Device
gridSVG:::devClose(svgdev)
}
graph <- svgmap(home, vars_node = "shop") + igeom_point(aes(colour = variable))
save_svgmaps(graph, file = "test.svg")
source('~/.active-rstudio-document')
save_svgmaps(graph, file = "test.svg")
save_svgmaps <- function (object, filename = "RPlot.svg") {
## Open a new SVG-Device
svgdev <- gridSVG:::openSVGDev(filename, width=par("din")[1], height=par("din")[2])
## Translate grid object, write
gridSVG:::gridToDev(object, svgdev)
## Close Device
gridSVG:::devClose(svgdev)
}
save_svgmaps <- function (object, filename = "RPlot.svg") {
}
source('~/.active-rstudio-document')
save_svgmaps(graph, file = "test.svg")
ggplot(meuse) + geom_point(aes(x = x, y = y))
?inherits
p <- qplot(cars)
p
qplot(data = cars, y = speed, x = dist)
p <- qplot(data = cars, y = speed, x = dist)
class(p)
class(p) <- "hi"
class(p)
p <- qplot(data = cars, y = speed, x = dist)
class(p)
class(p) <- c("svgmaps", class(p))
class(p)
browseURL()
browseURL(getwd("test.svg"))
browseURL(paste(getwd(), "test.svg"))
browseURL(paste(getwd(), "test.svg"))
?browseURL
getOption("browser")
?SpatialLinesDataFrame
# from the sp vignette:
l1 = cbind(c(1,2,3),c(3,2,2))
l1a = cbind(l1[,1]+.05,l1[,2]+.05)
l2 = cbind(c(1,2,3),c(1,1.5,1))
Sl1 = Line(l1)
Sl1a = Line(l1a)
Sl2 = Line(l2)
S1 = Lines(list(Sl1, Sl1a), ID="a")
S2 = Lines(list(Sl2), ID="b")
Sl = SpatialLines(list(S1,S2))
Sl
ggplot() + geom_path(aes(x = x, y = y), Sl)
?SpatialPolygonsDataFrame
grd <- GridTopology(c(1,1), c(1,1), c(10,10))
polys <- as.SpatialPolygons.GridTopology(grd)
centroids <- coordinates(polys)
x <- centroids[,1]
y <- centroids[,2]
z <- 1.4 + 0.1*x + 0.2*y + 0.002*x*x
#ex_1.7 <- SpatialPolygonsDataFrame(polys, data=data.frame(x=x, y=y, z=z, row.names=sapply(slot(polys, "polygons"), function(i) slot(i, "ID"))))
ex_1.7 <- SpatialPolygonsDataFrame(polys, data=data.frame(x=x, y=y, z=z, row.names=row.names(polys)))
brks <- quantile(z, seq(0,1,1/7))
ex <- ex_1.7
ggplot() + geom_polygon(x = x, y = y), ex)
ggplot() + geom_polygon(aes(x = x, y = y), ex)
traceback()
ggplot2:::layer
test <- function (d) d <- 2
test()
test <- function (d) d <- d + 2
test()
test <- function (d) if(d) d <- d + 2
test()
as_svgmaps(data)
?is.null
home
test <- svgmaps() + igeom_point(aes(colour = "value", tooltip = "value"), home, vars_node = "shop")
source('~/Dropbox/svgmaps/pkg/R/svgmap.R')
test <- svgmaps() + igeom_point(aes(colour = "value", tooltip = "value"), home, vars_node = "shop")
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), home, vars_node = "shop")
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_node = "shop")
source('~/Dropbox/svgmaps/pkg/R/svgmap.R')
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_node = "shop")
traceback()
source('~/Dropbox/svgmaps/pkg/R/igeom-point.R')
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_node = "shop")
traceback()
igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_node = "shop")
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_node = "shop")
traceback()
ggplot
ggplot.data.frame
test <- ggplot() + igeom_point(aes(colour = "value", tooltip = "value", x = "lon", y = "lat"), data = home, vars_node = "shop")
test
source('~/.active-rstudio-document')
test <- ggplot() + igeom_point(aes(colour = "value", tooltip = "value", x = "lon", y = "lat"), data = home, vars_node = "shop")
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_node = "shop")
source('~/Dropbox/svgmaps/pkg/R/svgmap.R')
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_node = "shop")
svgmap
source('~/Dropbox/svgmaps/pkg/R/svgmap.R')
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_node = "shop")
test
source('~/.active-rstudio-document')
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_node = "shop")
test
ls()
data
head(data)
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_line = "highway")
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_lines = "highway")
test <- svgmap() + igeom_point(aes(colour = "value", tooltip = "value"), data = home, vars_path = "highway")
test
library(proto)
library(ggplot2)
geom_path2 <- function (mapping = NULL, data = NULL, stat = "identity", position = "identity",
lineend = "butt", linejoin = "round", linemitre = 1, na.rm = FALSE, arrow = NULL, ...) {
GeomPath2$new(mapping = mapping, data = data, stat = stat, position = position,
lineend = lineend, linejoin = linejoin, linemitre = linemitre, na.rm = na.rm, arrow = arrow, ...)
}
GeomPath2 <- proto(ggplot2:::GeomPolygon, {
objname <- "path2"
draw <- function(.,  data, scales, coordinates, ...){
ggplot2:::GeomPath$draw(data, scales, coordinates, ...)
}
})
df <- data.frame(x = 1:10, y = 1:10, z = rep(c(1,2), times = 5))
p <- ggplot(df, aes(x = x, y = y, group = group))
p + geom_path()
p + geom_path()
p <- ggplot(df, aes(x = x, y = y, group = z))
p + geom_path()
df <- data.frame(x = 1:10, y = rep(c(4,5), each = 5), z = rep(c(1,2), times = 5))
p <- ggplot(df, aes(x = x, y = y, group = z))
p + geom_path()
p + geom_path2()
p + geom_path2(aes(colour = z))
geom_path2 <- function (mapping = NULL, data = NULL, stat = "identity", position = "identity",
lineend = "butt", linejoin = "round", linemitre = 1, na.rm = FALSE, arrow = NULL, ...) {
GeomPath2$new(mapping = mapping, data = data, stat = stat, position = position,
lineend = lineend, linejoin = linejoin, linemitre = linemitre, na.rm = na.rm, arrow = arrow, ...)
}
GeomPath2 <- proto(ggplot2:::GeomPolygon, {
objname <- "path2"
draw <- function(., data, scales, coordinates, arrow = NULL, lineend = "butt", linejoin = "round", linemitre = 1, ..., na.rm = FALSE){
ggplot2:::GeomPath$draw(data, scales, coordinates, arrow = NULL, lineend = "butt", linejoin = "round", linemitre = 1, ..., na.rm = FALSE)
}
})
df <- data.frame(x = 1:10, y = rep(c(4,5), each = 5), z = rep(c(1,2), times = 5))
p <- ggplot(df, aes(x = x, y = y, group = z))
p + geom_path()
p + geom_path2(aes(colour = z))
p + geom_path2(aes(colour = z))
p + geom_path()
p + geom_path2()
p + geom_path2(aes(colour = z))
p + geom_path()
p + geom_path(aes(colour= z))
GeomPath2 <- proto(ggplot2:::GeomPolygon, {
objname <- "path2"
draw <- function(., data, scales, coordinates, arrow = NULL, lineend = "butt", linejoin = "round", linemitre = 1, ..., na.rm = FALSE){
ggplot2:::GeomPath$draw(data, scales, coordinates, arrow = NULL, lineend = "butt", linejoin = "round", linemitre = 1, ..., na.rm = FALSE)
browser()
}
})
df <- data.frame(x = 1:10, y = rep(c(4,5), each = 5), z = rep(c(1,2), times = 5))
p <- ggplot(df, aes(x = x, y = y, group = z))
p + geom_path()
p + geom_path2()
ls()
data
Q
library(proto)
library(ggplot2)
geom_path2 <- function (mapping = NULL, data = NULL, stat = "identity", position = "identity",
lineend = "butt", linejoin = "round", linemitre = 1, na.rm = FALSE, arrow = NULL, ...) {
GeomPath2$new(mapping = mapping, data = data, stat = stat, position = position,
lineend = lineend, linejoin = linejoin, linemitre = linemitre, na.rm = na.rm, arrow = arrow, ...)
}
GeomPath2 <- proto(ggplot2:::GeomPolygon, {
objname <- "path2"
draw <- function(., data, scales, coordinates, arrow = NULL, lineend = "butt", linejoin = "round", linemitre = 1, ..., na.rm = FALSE){
ggplot2:::GeomPath$draw(data, scales, coordinates, arrow = NULL, lineend = "butt", linejoin = "round", linemitre = 1, ..., na.rm = FALSE)
browser()
}
default_aes <- function(.) aes(colour="black", size=0.5, linetype=1, alpha = 1)
})
df <- data.frame(x = 1:10, y = rep(c(4,5), each = 5), z = rep(c(1,2), times = 5))
p <- ggplot(df, aes(x = x, y = y, group = z))
p + geom_path()
p + geom_path2()
library(proto)
library(ggplot2)
geom_path2 <- function (mapping = NULL, data = NULL, stat = "identity", position = "identity",
lineend = "butt", linejoin = "round", linemitre = 1, na.rm = FALSE, arrow = NULL, ...) {
GeomPath2$new(mapping = mapping, data = data, stat = stat, position = position,
lineend = lineend, linejoin = linejoin, linemitre = linemitre, na.rm = na.rm, arrow = arrow, ...)
}
GeomPath2 <- proto(ggplot2:::GeomPolygon, {
objname <- "path2"
draw <- function(., data, scales, coordinates, arrow = NULL, lineend = "butt", linejoin = "round", linemitre = 1, ..., na.rm = FALSE){
ggplot2:::GeomPath$draw(data, scales, coordinates, arrow = NULL, lineend = "butt", linejoin = "round", linemitre = 1, ..., na.rm = FALSE)
}
default_aes <- function(.) aes(colour="black", size=0.5, linetype=1, alpha = 1)
})
df <- data.frame(x = 1:10, y = rep(c(4,5), each = 5), z = rep(c(1,2), times = 5))
p <- ggplot(df, aes(x = x, y = y, group = z))
p + geom_path()
p + geom_path2()
p + geom_path2()
p + geom_path2(aes(colour = z))
p + geom_path(aes(colour= z))
p + geom_path2(aes(colour = z))
p + geom_path(aes(colour= z))
p <- ggplot(df, aes(x = x, y = y, group = factor(z))
)
p <- ggplot(df, aes(x = x, y = y, group = factor(z)))
p + geom_path()
p + geom_path2()
p + geom_path2(aes(colour = z))
p + geom_path(aes(colour= z))
df <- data.frame(x = 1:10, y = rep(c(4,5), each = 5), z = rep(c(1,2), times = 5))
p <- ggplot(df, aes(x = x, y = y, group = factor(z)))
p + geom_path()
p + geom_path2()
p + geom_path2(aes(colour = z))
p + geom_path(aes(colour= z))
p <- ggplot(df, aes(x = x, y = y, group = as.factor(z)))
p + geom_path2(aes(colour = z))
p + geom_path(aes(colour= z))
df <- data.frame(x = 1:10, y = rep(c(4,5), each = 5), z = as.factor(rep(c(1,2), times = 5))
)
summary(df)
p <- ggplot(df, aes(x = x, y = y, group = z))
p + geom_path()
p + geom_path2()
p + geom_path2(aes(colour = z))
p + geom_path(aes(colour= z))
p + geom_path2(aes(colour = z))
+ geom_path(aes(colour= z))
library(proto)
library(ggplot2)
geom_path2 <- function (mapping = NULL, data = NULL, stat = "identity", position = "identity",
lineend = "butt", linejoin = "round", linemitre = 1, na.rm = FALSE, arrow = NULL, ...) {
GeomPath2$new(mapping = mapping, data = data, stat = stat, position = position,
lineend = lineend, linejoin = linejoin, linemitre = linemitre, na.rm = na.rm, arrow = arrow, ...)
}
GeomPath2 <- proto(ggplot2:::GeomPolygon, {
objname <- "path2"
draw <- function(., data, scales, coordinates, arrow = NULL, lineend = "butt", linejoin = "round", linemitre = 1, ..., na.rm = FALSE){
ggplot2:::GeomPath$draw(data, scales, coordinates, arrow = NULL, lineend = "butt", linejoin = "round", linemitre = 1, ..., na.rm = FALSE)
}
default_aes <- function(.) aes(colour="black", size=0.5, linetype=1, alpha = 1)
guide_geom <- function(.) "path"
})
df <- data.frame(x = 1:10, y = rep(c(4,5), each = 5), z = as.factor(rep(c(1,2), times = 5)))
p <- ggplot(df, aes(x = x, y = y, group = z))
p + geom_path()
p + geom_path2()
p + geom_path2(aes(colour = z))
library(grid)
grob
?any
?UseMethod
class(pointsGrob(x = 1:10, y = 1:10))
class(polylineGrob(x = 1:10, y = 1:10))
class(polygonGrob(x = 1:10, y = 1:10))
class(rectGrob(x = 1:10, y = 1:10))
test <- function(x, y) {
UseMethod("test", x)
}
test.data.frame <- function(x, y) {
print(x)
print(y)
}
df <- data.frame()
y <- 2
test(df, y)
##' Interactive Points
##'
##' The ipoint geom is used to add interactive points to a plot
##'
##' With this geom u can do the same stuff as with the original \code{geom_point}
##' from ggplot2 plus some additional mapping for interactivity.
##' See the man page of \code{geom_point} for more details on the static mapping
##' values (as colour, shape, size, ...)
##'
##' @section Aesthetics
##'
##' \code{geom_ipoint} understands the following aesthetics:
##'
##' \itemize{
##'   \item \code{x}; horizontal position
##'   \item \code{y}: vertical position
##'   \item \code{shape}: point shape
##'   \item \code{colour}: point colour
##'   \item \code{fill}: fill colour, only affects solid points
##'   \item \code{size}: size
##'   \item \code{alpha}: alpha transparency modifies colour
##'   \item \code{tooltip}: onmouseover tooltip (only in SVG)
##'   \item \code{highlight}: onclick highlighting (only in SVG)
##'   \item \code{link}: hyperlink to website (only in SVG)
##' @title
##' @param mapping
##' @param data
##' @param stat
##' @param position
##' @param na.rm
##' @param ...
##' @return
##' @author chris
igeom_point <- function (mapping = NULL,
data = NULL,
stat = "identity",
position = "identity",
na.rm = FALSE, ...) {
if (!is.null(data)) data <- as_svgmaps(data, ...)
IGeomPoint$new(mapping = mapping,
data = data,
stat = stat,
position = position,
na.rm = FALSE, ...)
}
IGeomPoint <- proto(ggplot2:::GeomPoint, {
objname <- "ipoint"
browser()
draw <- function(.,  data, scales, coordinates, ...){
## make a subset
data <- subset(data, subset = data$geom == "point")
gs <- ggplot2:::GeomPoint$draw(data, scales, coordinates, ...)
args <- list(x = gs, group = FALSE)
if ("tooltip" %in% names(data)){
args <- c(args, list(tooltip = data$tooltip, onmouseover = rep("showTooltip(evt)", nrow(data))))
}
if ("highlight" %in% names(data)){
args <- c(args, list(highlight = TRUE))
}
do.call(garnishGrob, args)
}
default_aes <-
})
IGeomPoint <- proto(ggplot2:::GeomPoint, {
objname <- "ipoint"
browser()
draw <- function(.,  data, scales, coordinates, ...){
## make a subset
data <- subset(data, subset = data$geom == "point")
gs <- ggplot2:::GeomPoint$draw(data, scales, coordinates, ...)
args <- list(x = gs, group = FALSE)
if ("tooltip" %in% names(data)){
args <- c(args, list(tooltip = data$tooltip, onmouseover = rep("showTooltip(evt)", nrow(data))))
}
if ("highlight" %in% names(data)){
args <- c(args, list(highlight = TRUE))
}
do.call(garnishGrob, args)
}
default_aes <- function(.) aes(colour="grey20", size=2, shape = 16,  alpha = 1, fill = NA)
})
Q
getwd()
load("../data/home.RData")
library(osmar)
library(reshape)
test <- melt(home$nodes$tags, id.var = "id")
test
test <- cast(home$nodes$tags, id.var = "id")
?cast
test <- cast(home$nodes$tags, id.var = "id")
test <- cast(home$nodes$tags, id ~ ...)
names(home$nodes$tags)
test <- cast(home$nodes$tags, ... ~ k)
test <- cast(home$nodes$tags, id ~ k)
test
dim(test)
test <- cast(home$nodes$tags, id ~ k, value = v)
test <- cast(home$nodes$tags, id ~ k, value = "v")
source("osmar-transform.R")
link <- "www.google.com"
paste("onclick=\"window.open('", link, "', '_blank', ''); return false;\"", sep = "")
?paste
cat(paste("onclick=\"window.open('", link, "', '_blank', ''); return false;\"", sep = ""))
intersect(c(1, 2), 2;10)
intersect(c(1, 2), 2:10)
intersect(c(1, 2), 4:10)
lenth(intersect(c(1, 2), 4:10))
length(intersect(c(1, 2), 4:10))
?switch
for(i in c(-1:3,9))  print(switch(i, 1,2,3,4))
add_interactivity.points <- function (gr, data){
args <- list()
for (interact in inter) {
arg <- switch(interact,
"tooltip" = list(tooltip = data$tooltip, onmouseover = rep("showTooltip(evt)", nrow(data)))
"link" = list(onclick = rep(paste("window.open('", link, "', '_blank', ''); return false;", sep = ""), nrow(data)))
)
args <- c(args, arg)
}
}
add_interactivity.points <- function (gr, data){
args <- list()
for (interact in inter) {
arg <- switch(interact,
"tooltip" = list(tooltip = data$tooltip, onmouseover = rep("showTooltip(evt)", nrow(data)))
"link" = list(onclick = rep(paste("window.open('", link, "', '_blank', ''); return false;", sep = ""), nrow(data)))
add_interactivity.points <- function (gr, data){
args <- list()
for (interact in inter) {
arg <- switch(interact,
"tooltip" = list(tooltip = data$tooltip, onmouseover = rep("showTooltip(evt)", nrow(data))),
"link" = list(onclick = rep(paste("window.open('", link, "', '_blank', ''); return false;", sep = ""), nrow(data)))
)
args <- c(args, arg)
}
}
add_interactivity(pointsGrob())
add_interactivity <- function (gr, data){
## is interactivity specified at all?
inter <- intersect(c("tooltip", "highlight", "link"), names(data))
if(length(inter) == 0) {
return(gr)
}
UseMethod("add_interactivity", object = grob)
}
add_interactivity(pointsGrob())
add_interactivity(pointsGrob(), data = data.frame(tooltip = 1:10, link =10:20))
add_interactivity(pointsGrob(), data = data.frame(tooltip = 1:10, link =10:19))
add_interactivity(grob = pointsGrob(), data = data.frame(tooltip = 1:10, link =10:19))
add_interactivity <- function (gr, data){
## is interactivity specified at all?
inter <- intersect(c("tooltip", "highlight", "link"), names(data))
if(length(inter) == 0) {
return(gr)
}
UseMethod("add_interactivity", object = gr)
}
add_interactivity(gr = pointsGrob(), data = data.frame(tooltip = 1:10, link =10:19))
pointsGrob
library(grid)
add_interactivity(gr = pointsGrob(), data = data.frame(tooltip = 1:10, link =10:19))
add_interactivity.points <- function (gr, data){
args <- list()
for (interact in inter) {
arg <- switch(interact,
"tooltip" = list(tooltip = data$tooltip, onmouseover = rep("showTooltip(evt)", nrow(data))),
"link" = list(onclick = rep(paste("window.open('", link, "', '_blank', ''); return false;", sep = ""), nrow(data)))
)
args <- c(args, arg)
print(args)
}
}
add_interactivity(gr = pointsGrob(), data = data.frame(tooltip = 1:10, link =10:19))
add_interactivity.points <- function (gr, data){
args <- list()
for (interact in inter) {
arg <- switch(interact,
"tooltip" = list(tooltip = data$tooltip, onmouseover = rep("showTooltip(evt)", nrow(data))),
"link" = list(onclick = rep(paste("window.open('", data$link, "', '_blank', ''); return false;", sep = ""), nrow(data)))
)
args <- c(args, arg)
print(args)
}
}
add_interactivity(gr = pointsGrob(), data = data.frame(tooltip = 1:10, link =10:19))
data <- data.frame(tooltip = 1:10, link =10:19)
ist(onclick = rep(paste("window.open('", data$link, "', '_blank', ''); return false;", sep = ""), nrow(data))
)
list(onclick = rep(paste("window.open('", data$link, "', '_blank', ''); return false;", sep = ""), nrow(data)))
paste("window.open('", data$link, "', '_blank', ''); return false;", sep = "")
